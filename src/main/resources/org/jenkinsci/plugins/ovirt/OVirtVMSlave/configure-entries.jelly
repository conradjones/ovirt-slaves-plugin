<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout"
         xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:sel="/lib/form">


    <!--
      - Show a list of ovirt hypervisors available
      -
      - The onchange function will update both the virtual machine and the snapshot name values in the dropdown
      - menu
      -
      - The method doGetVMNames and doGetSnapshotNames from OVirtVMSlave will be called
      - The initial value of hypervisor is obtained via doFillHypervisorDescriptionItems function in OVirtVMSlave
      -->
    <f:entry field="hypervisorDescription" title="${%Hypervisor}">
	   <f:select id='hypervisor'
	             onchange="updateListBox(
	                          'virtualMachineName',
	                          '${descriptor.getDescriptorFullUrl()}/getVMNames?hypervisor=' + encode(this.value));"/>
	</f:entry>

    <!--
      -  Show a list of virtual machines available for the hypervisor selected
      -
      - On change, the doGetSnapshotNames function from OVirtVMSlave will be called
      -->
    <f:entry title="${%Virtual Machine}" field="virtualMachineName">
        <select id="virtualMachineName"
                class="setting-input"
                name="virtualMachineName"
                value="${instance.virtualMachineName}"
                onchange="updateListBox(
                              'snapshotName',
                              '${descriptor.getDescriptorFullUrl()}/getSnapshotNames?vm=' + encode(this.value) + '&amp;hypervisor=' + encode(document.getElementsByName('_.hypervisorDescription')[0].options[document.getElementsByName('_.hypervisorDescription')[0].selectedIndex].text))">

            <!-- Initial values: this is really needed when you want to configure an existing node -->
            <j:forEach var="vc"
                       items="${descriptor.getVMNamesList(it.hypervisorDescription)}" varStatus="loop">
                <option selected="${vc == it.virtualMachineName ? 'true' : null}">
                     ${vc}
                </option>
            </j:forEach>
        </select>
    </f:entry>

    <!--
      - Show a list of snapshots available for the vm to reset to upon launch
      -->
    <f:entry title="${%Snapshot name}" field="snapshotName">
        <select class="setting-input" name="snapshotName" id="snapshotName" value="${instance.snapshotName}">

            <!-- Initial values: this is really needed when you want to configure an existing node -->
            <j:forEach var="snapshot"
                       items="${descriptor.getSnapshotNamesList(it.virtualMachineName, it.hypervisorDescription)}"
                       varStatus="loop">
                <option selected="${snapshot == it.snapshotName ? 'true' : null}">
                     ${snapshot}
                </option>
            </j:forEach>
        </select>
    </f:entry>

    <f:entry title="${%Description}" help="/help/system-config/master-slave/description.html">
        <f:textbox field="nodeDescription"/>
    </f:entry>

    <f:entry title="${%Startup/Shutdown Idle (sec)}" field="waitSec">
        <f:textbox default="20"/>
    </f:entry>

    <f:entry title="${%Time to retry Startup/Shutdown}" field="retries">
        <f:textbox default="10"/>
    </f:entry>

    <f:entry title="${%# of executors}" field="numExecutors">
        <f:textbox/>
    </f:entry>

    <f:entry title="${%Remote FS root}" field="remoteFS">
        <f:textbox/>
    </f:entry>

    <f:entry title="${%Labels}" field="labelString">
        <f:textbox/>
    </f:entry>

    <f:slave-mode name="mode" node="${it}"/>

    <!--
      - Show delegate launchers available for this vm
      -->
  <!-- TODO: should be packaged as a tag -->
  <f:dropdownList name="slave.delegateLauncher" title="${%Launch method}"
                  help="${descriptor.getHelpFile('launcher')}">
    <j:forEach var="d" items="${h.getComputerLauncherDescriptors()}">
      <f:dropdownListBlock value="${d.clazz.name}" name="${d.displayName}"
                           selected="${it.delegateLauncher.descriptor==d}"
                           title="${d.displayName}">
        <j:set var="descriptor" value="${d}"/>
        <j:set var="instance"
               value="${it.delegateLauncher.descriptor==d ? it.delegateLauncher : null}"/>
        <f:invisibleEntry>
          <input type="hidden" name="stapler-class" value="${d.clazz.name}" />
        </f:invisibleEntry>
        <st:include from="${d}" page="${d.configPage}" optional="true"/>
      </f:dropdownListBlock>
    </j:forEach>
  </f:dropdownList>

    <!-- pointless to show this if there's only one option, which is the default -->
    <j:if test="${h.getRetentionStrategyDescriptors().size() gt 1}">
        <f:dropdownList name="slave.retentionStrategy"
                        title="${%Availability}"
                        help="/help/system-config/master-slave/availability.html">

            <j:forEach var="d" items="${h.getRetentionStrategyDescriptors()}">
                <j:if test="${d != null}">
                    <f:dropdownListBlock value="${d.clazz.name}"
                                         name="${d.displayName}"
                                         selected="${it.retentionStrategy.descriptor==d}"
                                         title="${d.displayName}">

                        <j:set var="descriptor" value="${d}"/>
                        <j:set var="instance"
                               value="${it.retentionStrategy.descriptor==d ? it.retentionStrategy : null}"/>
                        <tr>
                            <td>
                                <input type="hidden" name="stapler-class" value="${d.clazz.name}"/>
                            </td>
                        </tr>
                        <st:include from="${d}" page="${d.configPage}" optional="true"/>
                    </f:dropdownListBlock>
                </j:if>
            </j:forEach>
        </f:dropdownList>
    </j:if>

    <f:descriptorList title="${%Node Properties}"
                      descriptors="${h.getNodePropertyDescriptors(descriptor.clazz)}"
                      field="nodeProperties"/>

</j:jelly>